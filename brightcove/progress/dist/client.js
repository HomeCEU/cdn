!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t,n){var r=this;this.iframe=t,this.http=n,this.hasPinged=!1,t.contentWindow.addEventListener("message",(function(t){t.data.event===e.PONG&&(console.log("plugin","PONGed"),r.hasPinged||(r.hasPinged=!0,r.onReady().then())),t.data.event===e.SEND_PROGRESS&&r.http.setProgress(t.data).then()})),this.ping().then()}return e.prototype.ping=function(){var t=this;return new Promise((function(n){if(!t.hasPinged)return t.iframe.contentWindow.postMessage({event:e.PING},"*"),new Promise((function(e){return setTimeout((function(){return e()}),300)})).then((function(){return t.ping()}));n()}))},e.prototype.onReady=function(){return this.sendProgress()},e.prototype.sendProgress=function(){var t=this;return this.http.getProgress().then((function(n){t.iframe.contentWindow.postMessage({event:e.GET_PROGRESS,data:n},"*")}))},e.PING="video.progress.ping",e.PONG="video.progress.pong",e.GET_PROGRESS="video.progress.get",e.SEND_PROGRESS="video.progress.set",e}();t.ProgressPluginClient=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,